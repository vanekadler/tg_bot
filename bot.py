import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties

# üîê –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8093577977:AAFpJGqDIGSWIWi21zP3SUAdVEiZ8-wOaCg"

# üë§ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 6270030591

# üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
from aiogram import Router

router = Router()
dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# üß† –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(router)

# üì¶ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ü—Ä–∞–π—Å")],
        [KeyboardButton(text="üì¶ –ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ")],
        [KeyboardButton(text="üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="‚ùì FAQ")],
        [KeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")]
    ],
    resize_keyboard=True
)

# üßæ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@router.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:", reply_markup=main_keyboard)

# üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
price_list = """
<b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:</b>
...
"""

# üìÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "üìã –ü—Ä–∞–π—Å"
@router.message(F.text == "üìã –ü—Ä–∞–π—Å")
async def handle_price(message: Message):
    await message.answer(price_list)
    try:
        file = FSInputFile("price.pdf")
        await message.answer_document(file, caption="üìÑ –ü—Ä–∞–π—Å –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ")
    except FileNotFoundError:
        await message.answer("‚ùå PDF-—Ñ–∞–π–ª –ø—Ä–∞–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# üì¶ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ"
@router.message(F.text == "üì¶ –ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ")
async def stock_handler(message: Message):
    try:
        with open("stock.txt", "r", encoding="utf-8") as f:
            stock = f.read()
        await message.answer(f"<b>üì¶ –í –Ω–∞–ª–∏—á–∏–∏:</b>\n{stock}")
    except FileNotFoundError:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.")

# üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
@router.message(F.text == "üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def order_handler(message: Message):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏.")

# üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É
@router.message(F.text & ~F.text.in_(["üìã –ü—Ä–∞–π—Å", "üì¶ –ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ", "üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", "‚ùì FAQ", "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"]))
async def handle_order_text(message: Message):
    if message.reply_to_message and "–∑–∞–∫–∞–∑–∞—Ç—å" in message.reply_to_message.text.lower():
        return
    text = f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}:\n\n{message.text}"
    await bot.send_message(chat_id=ADMIN_ID, text=text)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

# ‚ùì FAQ
@router.message(F.text == "‚ùì FAQ")
async def faq_handler(message: Message):
    faq = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        "1. <b>–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?</b>\n‚Äî –ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É/–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞ –Ω–∞ –Æ–† –ª–∏—Ü–æ(–∫–ª–∏–Ω–∏–∫—É).\n\n"
        "2. <b>–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?</b>\n‚Äî –ß–µ—Ä–µ–∑ –°–î–≠–ö –∏–ª–∏ Boxberry.\n\n"
        "3. <b>–ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—è?</b>\n‚Äî –î–∞, –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è.\n\n"
        "4. <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?</b>\n‚Äî –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º –ª–∏—á–Ω–æ."
    )
    await message.answer(faq)

# üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
@router.message(F.text == "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
async def subscribe_handler(message: Message):
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –ù–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞!")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# üåê –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
import uvicorn
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def health_check():
    return {"status": "Bot is running"}

def run_server():
    port = int(os.getenv("PORT", 10000))
    uvicorn.run(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    import os
    from threading import Thread

    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = Thread(target=run_server)
    server_thread.daemon = True
    server_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞—à–µ–π
    asyncio.run(main())


